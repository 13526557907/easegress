# NOTE: DON'T EDIT THIS FILE, IT'S GENERATED BY SWAGGER DOC FROM CODE
# Please refer to http://gateway.ip:9090/cluster/health/v1/apidocs.json for the latest version
swagger: '2.0'
info:
  description: Expose cluster health status for managing or debuging Cluster
  title: Cluster Health Service
  contact:
    name: megaease
    url: 'http://megaease.com'
    email: service@megaease.com
  version: 1.0.0
basePath: /cluster/health
paths:
  /v1/check/groups:
    get:
      description: The cluster group health check retrieve endpoint in the cluster returns the health check status of specific group
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster health check information
      summary: Retrieves health check status for groups in a cluster
      operationId: healthCheckGroups
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The specific group's health check status in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupHealthPayload'
        '408':
          description: Request timeout.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The specific group's health check status in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupHealthPayload'
  '/v1/check/groups/{group-name}':
    get:
      description: The cluster group health check retrieve endpoint in the cluster returns the health check status of specific group
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster health check information
      summary: Retrieves specific group health check status in a cluster
      operationId: healthCheckGroup
      parameters:
        - type: string
          description: Group name of cluster to query.
          name: group-name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The specific group's health check status in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupHealthPayload'
        '404':
          description: The group not found by given name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The specific group's health check status in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupHealthPayload'
  /v1/info/groups:
    get:
      description: The cluster groups retrieve endpoint in the cluster returns the list of all groups
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster group information
      summary: Retrieves groups list in a cluster
      operationId: retrieveGroupsList
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The groups list in a cluster.
          schema:
            $ref: '#/definitions/rest.clusterRetrieveGroupsResponse'
        '404':
          description: The group not found by given name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The groups list in a cluster.
          schema:
            $ref: '#/definitions/rest.clusterRetrieveGroupsResponse'
  '/v1/info/groups/{group-name}':
    get:
      description: The cluster specific group retrieve endpoint in the cluster returns the detail information of the specified group
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster group information
      summary: Retrieves specific group information in a cluster
      operationId: retrieveGroup
      parameters:
        - type: string
          description: Group name of cluster to query.
          name: group-name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The group detailed information in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupPayload'
        '206':
          description: The group detailed information in a cluster. But only partial group members respond the query
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupPayload'
        '400':
          description: Invalid group name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '404':
          description: The group not found by given name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '408':
          description: Request timeout.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The group detailed information in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryGroupPayload'
  '/v1/info/groups/{group-name}/members':
    get:
      description: The cluster members retrieve endpoint in the cluster returns the list of members in this group.
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster member information
      summary: Retrieves members list of a group in a cluster
      operationId: retrieveMembersInGroup
      parameters:
        - type: string
          description: Group name of cluster to query
          name: group-name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The members list of a specific group in a cluster
          schema:
            $ref: '#/definitions/gateway.RespQueryMembersList'
        '404':
          description: The group or member not found by given name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '408':
          description: Request timeout.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The members list of a specific group in a cluster
          schema:
            $ref: '#/definitions/gateway.RespQueryMembersList'
  '/v1/info/groups/{group-name}/members/{member-name}':
    get:
      description: The cluster members retrieve endpoint in the cluster returns the detail information of the specified member
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - cluster member information
      summary: Retrieves specific member information in a cluster
      operationId: retrieveMember
      parameters:
        - type: string
          description: Member name of cluster to query
          name: member-name
          in: path
          required: true
        - type: string
          description: group name of cluster to query
          name: group-name
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/rest.clusterRequest'
      responses:
        '200':
          description: The member detailed information in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryMember'
        '404':
          description: The member not found by given name.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '408':
          description: Request timeout.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '500':
          description: Handle the request failed by internal error.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        '503':
          description: All operations are disallowed when running in standalone mode.
          schema:
            $ref: '#/definitions/rest.errorResponse'
        default:
          description: The member detailed information in a cluster.
          schema:
            $ref: '#/definitions/gateway.RespQueryMember'
definitions:
  gateway.GossipConfig:
    required:
      - gossip_packet_size_bytes
      - gossip_interval_ms
    properties:
      gossip_interval_ms:
        description: Interval in millisecond between sending messages that need to be gossiped that haven't been able to piggyback on probing messages.
        type: integer
      gossip_packet_size_bytes:
        description: Maximum number of bytes that memberlist will put in a packet (this will be for UDP packets by default with a NetTransport).
        type: integer
        format: int32
  gateway.MemberInfo:
    required:
      - name
      - endpoint
      - mode
    properties:
      endpoint:
        description: Member endpoint
        type: string
      mode:
        description: Member mode
        type: string
        enum:
          - write
          - read
      name:
        description: Member name
        type: string
  gateway.OpLogConfig:
    required:
      - max_seq_gap_to_pull
      - pull_max_count_once
      - pull_interval_seconds
      - pull_timeout_seconds
    properties:
      max_seq_gap_to_pull:
        description: Max gap of sequence of operation logs deciding whether to wait for missing operations or not
        type: integer
      pull_interval_seconds:
        description: Interval of pulling operation logs in second
        type: integer
      pull_max_count_once:
        description: Max count of pulling operation logs once
        type: integer
      pull_timeout_seconds:
        description: Timeout of pulling operation logs in second
        type: integer
  gateway.OpLogGroupInfo:
    required:
      - synced
      - max_sequence
      - min_sequence
      - unsynced_members_count
      - unsynced_members
    properties:
      max_sequence:
        description: Operation log maximum sequence. Negative value means invalid max sequence.
        type: integer
        format: int64
        default: -1
      min_sequence:
        description: Operation log minimum sequence. Negative value means invalid max sequence.
        type: integer
        format: int64
        default: -1
      synced:
        description: 'Whether operation log is synced with writer node. For a normal group/node, this value should be true.'
        type: boolean
        default: false
      unsynced_members:
        description: The members names on which operation log is unsynchronized
        type: array
        items:
          type: string
      unsynced_members_count:
        description: The count of unsynced members
        type: integer
  gateway.OpLogInfo:
    required:
      - data_path
      - size_bytes
      - sync_progress
      - sync_lag
      - synced
      - max_sequence
      - min_sequence
    properties:
      data_path:
        description: Operation log local data path on the node.
        type: string
      max_sequence:
        description: Operation log maximum sequence. Negative value means invalid max sequence.
        type: integer
        format: int64
        default: -1
      min_sequence:
        description: Operation log minimum sequence. Negative value means invalid max sequence.
        type: integer
        format: int64
        default: -1
      size_bytes:
        description: Operation log files size in bytes
        type: integer
      sync_lag:
        description: 'Indicate the operation log syncing lag. This is the difference between writer node''s operation log max sequence and specific member''s max sequence. In normal case, this value should be zero. Negative value means invalid sync lag.'
        type: integer
        format: int64
        default: -1
      sync_progress:
        description: 'Operation log syncing progress, 100 indicates the operation log is fully synchronized. Negative value means invalid sync progress.'
        type: integer
        default: -1
        maximum: 100
        minimum: 0
      synced:
        description: 'Whether operation log is synced with writer node. For a normal group/node, this value should be true.'
        type: boolean
        default: false
  gateway.RespQueryGroupHealthPayload:
    required:
      - time
      - status
      - description
    properties:
      description:
        description: 'Indicates description of the status. For a green status, this value will be empty'
        type: string
      status:
        description: Indicates the group health status.
        type: string
        enum:
          - green
          - yellow
          - red
      time:
        description: Timestamp of the response
        type: string
        format: date-time
  gateway.RespQueryGroupPayload:
    required:
      - time
      - oplog
      - failed_members
      - alive_members_count
      - alive_members
      - failed_members_count
    properties:
      alive_members:
        description: The alive members
        type: array
        items:
          $ref: '#/definitions/gateway.MemberInfo'
      alive_members_count:
        description: Count of alive members
        type: integer
      failed_members:
        description: The failed(can't connect these members) members
        type: array
        items:
          $ref: '#/definitions/gateway.MemberInfo'
      failed_members_count:
        description: Count of failed members
        type: integer
      oplog:
        description: Group's operation log information
        $ref: '#/definitions/gateway.OpLogGroupInfo'
      time:
        description: Timestamp of the response
        type: string
        format: date-time
  gateway.RespQueryMember:
    required:
      - time
      - config
      - oplog
    properties:
      config:
        description: Member configurations
        $ref: '#/definitions/gateway.memberConfig'
      oplog:
        description: Member's operation log information
        $ref: '#/definitions/gateway.OpLogInfo'
      time:
        description: Timestamp of the response
        type: string
        format: date-time
  gateway.RespQueryMembersList:
    required:
      - time
      - failed_members
      - alive_members_count
      - alive_members
      - failed_members_count
    properties:
      alive_members:
        description: The alive members
        type: array
        items:
          $ref: '#/definitions/gateway.MemberInfo'
      alive_members_count:
        description: Count of alive members
        type: integer
      failed_members:
        description: The failed(can't connect these members) members
        type: array
        items:
          $ref: '#/definitions/gateway.MemberInfo'
      failed_members_count:
        description: Count of failed members
        type: integer
      time:
        description: Timestamp of the response
        type: string
        format: date-time
  gateway.memberConfig:
    required:
      - cluster_default_op_timeout_sec
      - gossip
      - oplog
    properties:
      cluster_default_op_timeout_sec:
        description: default timeout of cluster operation in second
        type: integer
      gossip:
        description: Gossip configurations
        $ref: '#/definitions/gateway.GossipConfig'
      oplog:
        description: Operation log configurations
        $ref: '#/definitions/gateway.OpLogConfig'
  rest.clusterRequest:
    properties:
      timeout_sec:
        description: Timeout for cluster operations
        type: integer
        default: 120
  rest.clusterRetrieveGroupsResponse:
    required:
      - time
      - groups_count
      - groups
    properties:
      groups:
        type: array
        items:
          type: string
      groups_count:
        type: integer
        format: int32
      time:
        description: Timestamp of the response
        type: string
        format: date-time
  rest.errorResponse:
    required:
      - Error
    properties:
      Error:
        type: string
