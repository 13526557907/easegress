package httpstat

import (
	"sync"

	"github.com/megaease/easegateway/pkg/context"
	"github.com/megaease/easegateway/pkg/util/sampler"

	metrics "github.com/rcrowley/go-metrics"
)

type (
	// HTTPStat is the statistics tool for HTTP traffic.
	HTTPStat struct {
		mutex sync.Mutex

		rate1           metrics.EWMA
		count           uint64
		durationSampler *sampler.DurationSampler
		reqSize         uint64
		respSize        uint64
		cc              *codeCounter
	}

	// Status contains all status generated by HTTPStat.
	Status struct {
		TPS      uint64         `yaml:"tps"`
		Count    uint64         `yaml:"count"`
		P50      uint64         `yaml:"p50"`
		P95      uint64         `yaml:"p95"`
		P99      uint64         `yaml:"p99"`
		ReqSize  uint64         `yaml:"reqSize"`
		RespSize uint64         `yaml:"respSize"`
		Codes    map[int]uint64 `yaml:"codes"`
	}
)

// New creates an HTTPStat.
func New() *HTTPStat {
	hs := &HTTPStat{
		cc:              newCodeCounter(),
		rate1:           metrics.NewEWMA1(),
		durationSampler: sampler.NewDurationSampler(),
	}

	return hs
}

// NOTE: The methods of HTTPStats use Mutex to protect themselves.
// It does not hurt affect performance , because all statistics
// are called after finishing all other stuff in HTTPContext.

// Stat stats the ctx.
func (hs *HTTPStat) Stat(ctx context.HTTPContext) {
	hs.mutex.Lock()
	defer hs.mutex.Unlock()

	hs.rate1.Update(1)
	hs.cc.count(ctx.Response().StatusCode())
	hs.durationSampler.Update(ctx.Duration())

	hs.reqSize += ctx.Request().Size()
	hs.respSize += ctx.Response().Size()
	hs.count++
}

// Status returns HTTPStat Status, and resets tps and p50/p95/p99.
func (hs *HTTPStat) Status() *Status {
	hs.mutex.Lock()
	defer hs.mutex.Unlock()

	hs.rate1.Tick()

	status := &Status{
		TPS:      uint64(hs.rate1.Rate()),
		Count:    hs.count,
		ReqSize:  hs.reqSize,
		RespSize: hs.respSize,
		Codes:    hs.cc.codes(),
	}
	status.P50, status.P95, status.P99 = hs.durationSampler.P50P95P99()

	hs.rate1 = metrics.NewEWMA1()
	hs.durationSampler = sampler.NewDurationSampler()

	return status
}
